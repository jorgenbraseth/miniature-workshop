name: Deploy Miniature Workshop

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering
    inputs:
      deploy_backend:
        description: 'Deploy backend'
        required: false
        default: 'auto'
        type: choice
        options:
          - 'auto'
          - 'true'
          - 'false'
      deploy_frontend:
        description: 'Deploy frontend'
        required: false
        default: 'auto'
        type: choice
        options:
          - 'auto'
          - 'true'
          - 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'

jobs:
  # Detect changes in different parts of the codebase
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/deploy.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/deploy.yml'

  test:
    runs-on: ubuntu-latest
    needs: changes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Install frontend dependencies
        if: needs.changes.outputs.frontend == 'true'
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Install backend dependencies
        if: needs.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: pnpm install --frozen-lockfile

      - name: Lint frontend
        if: needs.changes.outputs.frontend == 'true'
        working-directory: ./frontend
        run: pnpm run lint

      - name: Build frontend
        if: needs.changes.outputs.frontend == 'true'
        working-directory: ./frontend
        run: pnpm run build

      - name: Test backend
        if: needs.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: pnpm run test
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

  deploy-backend:
    needs: [changes, test]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && (
        (github.event_name != 'workflow_dispatch' && needs.changes.outputs.backend == 'true') ||
        (github.event_name == 'workflow_dispatch' && (
          inputs.deploy_backend == 'true' || 
          (inputs.deploy_backend == 'auto' && needs.changes.outputs.backend == 'true')
        ))
      )
    outputs:
      API_URL: ${{ steps.deploy.outputs.API_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Install Serverless Framework
        run: pnpm add -g serverless

      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --frozen-lockfile

      - name: Deploy backend to production
        working-directory: ./backend
        run: |
          pnpm run deploy
          echo "üîç Getting API URL from deployed stack..."
          API_URL=$(aws cloudformation describe-stacks --stack-name miniature-workshop-backend-prod --query 'Stacks[0].Outputs[?OutputKey==`HttpApiUrl`].OutputValue' --output text --region eu-west-1 2>/dev/null || echo "")
          
          if [ -z "$API_URL" ] || [ "$API_URL" = "None" ]; then
            echo "‚ùå HttpApiUrl not found, trying ApiEndpoint..."
            API_URL=$(aws cloudformation describe-stacks --stack-name miniature-workshop-backend-prod --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' --output text --region eu-west-1 2>/dev/null || echo "")
          fi
          
          if [ -z "$API_URL" ] || [ "$API_URL" = "None" ]; then
            echo "‚ùå Could not extract API URL from CloudFormation outputs"
            exit 1
          fi
          
          echo "‚úÖ API URL: $API_URL"
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          NODE_OPTIONS: '--max-old-space-size=4096'
        id: deploy

      - name: Display API URL
        run: echo "üöÄ API deployed at ${{ steps.deploy.outputs.API_URL }}"

  # Get current API URL if backend wasn't deployed
  get-api-url:
    needs: [changes, test]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && (
        (github.event_name != 'workflow_dispatch' && needs.changes.outputs.frontend == 'true' && needs.changes.outputs.backend == 'false') ||
        (github.event_name == 'workflow_dispatch' && (
          inputs.deploy_frontend == 'true' || 
          (inputs.deploy_frontend == 'auto' && needs.changes.outputs.frontend == 'true')
        ) && !(
          inputs.deploy_backend == 'true' || 
          (inputs.deploy_backend == 'auto' && needs.changes.outputs.backend == 'true')
        ))
      )
    outputs:
      API_URL: ${{ steps.get-url.outputs.API_URL }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Get existing API URL
        id: get-url
        run: |
          echo "üîç Attempting to get API URL from CloudFormation..."
          API_URL=$(aws cloudformation describe-stacks --stack-name miniature-workshop-backend-prod --query 'Stacks[0].Outputs[?OutputKey==`HttpApiUrl`].OutputValue' --output text --region eu-west-1 2>/dev/null || echo "")
          
          if [ -z "$API_URL" ] || [ "$API_URL" = "None" ]; then
            echo "‚ùå Could not get API URL from CloudFormation"
            # Try alternative output key names
            API_URL=$(aws cloudformation describe-stacks --stack-name miniature-workshop-backend-prod --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' --output text --region eu-west-1 2>/dev/null || echo "")
            
            if [ -z "$API_URL" ] || [ "$API_URL" = "None" ]; then
              echo "‚ùå Could not get API URL with alternative key either"
              # Use a known working API URL as fallback
              API_URL="https://bj1q3p3gvi.execute-api.eu-west-1.amazonaws.com"
              echo "üîÑ Using fallback API URL: $API_URL"
            else
              echo "‚úÖ Found API URL with alternative key: $API_URL"
            fi
          else
            echo "‚úÖ Found API URL: $API_URL"
          fi
          
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT

  deploy-frontend:
    needs: [changes, test, deploy-backend, get-api-url]
    runs-on: ubuntu-latest
    if: |
      always() && 
      github.ref == 'refs/heads/main' && 
      (
        (github.event_name != 'workflow_dispatch' && (
          needs.changes.outputs.frontend == 'true' || 
          needs.deploy-backend.result == 'success'
        )) ||
        (github.event_name == 'workflow_dispatch' && (
          inputs.deploy_frontend == 'true' || 
          (inputs.deploy_frontend == 'auto' && needs.changes.outputs.frontend == 'true') ||
          needs.deploy-backend.result == 'success'
        ))
      ) &&
      (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped') &&
      (needs.get-api-url.result == 'success' || needs.get-api-url.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Create production environment file
        working-directory: ./frontend
        run: |
          echo "üîß Creating .env.production file..."
          echo "VITE_API_BASE_URL=${{ needs.deploy-backend.outputs.API_URL || needs.get-api-url.outputs.API_URL }}" > .env.production
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.production
          echo "VITE_IMAGES_BUCKET=miniature-workshop-backend-prod-images" >> .env.production
          echo "üìÑ Contents of .env.production:"
          cat .env.production
          echo "‚úÖ Environment file created"

      - name: Debug environment variables
        run: |
          echo "üîç Environment Variables Check:"
          echo "API_URL: ${{ needs.deploy-backend.outputs.API_URL || needs.get-api-url.outputs.API_URL }}"
          echo "GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID != '' && '‚úÖ Set' || '‚ùå Not Set' }}"
          echo "GOOGLE_CLIENT_ID available: ${{ secrets.GOOGLE_CLIENT_ID && 'YES' || 'NO' }}"
          echo "Backend output: ${{ needs.deploy-backend.outputs.API_URL }}"
          echo "Get-URL output: ${{ needs.get-api-url.outputs.API_URL }}"
          
      - name: Build frontend for production
        working-directory: ./frontend
        run: pnpm run build
        env:
          VITE_API_BASE_URL: ${{ needs.deploy-backend.outputs.API_URL || needs.get-api-url.outputs.API_URL }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          VITE_IMAGES_BUCKET: miniature-workshop-backend-prod-images

      - name: Verify build contains environment variables
        working-directory: ./frontend
        run: |
          echo "üîç Checking if environment variables are in built files:"
          echo "üìÅ Built files:"
          ls -la dist/assets/
          echo ""
          
          echo "üîç Searching for environment variable names (should NOT be found):"
          if grep -r "VITE_GOOGLE_CLIENT_ID" dist/ 2>/dev/null; then
            echo "‚ùå Environment variable names found in build (should be replaced with values)"
          else
            echo "‚úÖ Environment variable names not found (good - they were replaced)"
          fi
          
          echo ""
          echo "üîç Searching for Google Client ID pattern:"
          if grep -r "apps\.googleusercontent\.com" dist/ 2>/dev/null; then
            echo "‚úÖ Google Client ID found in build"
          else
            echo "‚ùå Google Client ID not found in build"
          fi
          
          echo ""
          echo "üîç Searching for API URL pattern:"
          if grep -r "execute-api.*amazonaws\.com" dist/ 2>/dev/null; then
            echo "‚úÖ API URL found in build"
          else
            echo "‚ùå API URL not found in build"
          fi

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'
          alias-domains: |
            miniature-workshop.vercel.app
        env:
          VITE_API_BASE_URL: ${{ needs.deploy-backend.outputs.API_URL || needs.get-api-url.outputs.API_URL }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          VITE_IMAGES_BUCKET: miniature-workshop-backend-prod-images

  # Summary job to show what was deployed
  deployment-summary:
    needs: [changes, deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
            echo "‚úÖ **Backend**: Deployed successfully (new API URL generated)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.changes.outputs.backend }}" == "true" ]]; then
            echo "‚ùå **Backend**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Backend**: No changes detected, skipped deployment" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
              echo "‚úÖ **Frontend**: Deployed successfully (updated with new API URL)" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ **Frontend**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
            fi
          elif [[ "${{ needs.changes.outputs.frontend }}" == "true" ]] || [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
            echo "‚ùå **Frontend**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Frontend**: No changes detected, skipped deployment" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Live App**: https://miniature-workshop.vercel.app" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ÑπÔ∏è **Note**: Backend deployment generated new API URL, frontend was automatically redeployed" >> $GITHUB_STEP_SUMMARY
          fi 